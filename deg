"use client";

import { useState } from "react";
import { ChevronLeft, ChevronRight, DollarSign } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from "@/components/calendar-parts/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import AddTransactionsBtn from "@/components/calendar-parts/addTransactionsBtn";

const DAYS_OF_WEEK = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

const SAMPLE_SPENDING_DATA = [
  {
    date: "2025-06-02",
    budget: 2000,
    total: 410.5,
    transactions: [
      { category: "Groceries", amount: 130.5, description: "Grocery shopping" },
      { category: "Entertainment", amount: 150, description: "Concert tickets" },
      { category: "Transportation", amount: 130, description: "Bus pass" },
    ],
  },
  {
    date: "2025-06-03",
    budget: 2000,
    total: 765.5,
    transactions: [
      { category: "Rent", amount: 600, description: "Monthly rent payment" },
      { category: "Entertainment", amount: 120, description: "Concert tickets" },
      { category: "Dining Out", amount: 45.5, description: "Dinner with friends" },
    ],
  },
  {
    date: "2025-06-04",
    budget: 2000,
    total: 140.5,
    transactions: [
      { category: "Transportation", amount: 75.5, description: "Gas and tolls" },
      { category: "Entertainment", amount: 35, description: "Movie tickets" },
      { category: "Personal Care", amount: 30, description: "Haircut" },
    ],
  },
];

function firstDayOfMonth(year: number, month: number) {
  return new Date(year, month, 1).getDay();
}
function daysInMonth(year: number, month: number) {
  return new Date(year, month + 1, 0).getDate();
}
function makeDateKey(year: number, month: number, day: number) {
  return `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
}

export default function MonthCalendar() {
  const today = new Date();
  const [currentMonth, setCurrentMonth] = useState(today.getMonth());
  const [currentYear, setCurrentYear] = useState(today.getFullYear());
  const [spendingData, setSpendingData] = useState(SAMPLE_SPENDING_DATA);
  const [selectedDate, setSelectedDate] = useState<string | null>(null);

  const handleAddTransaction = (tx: {
    date: string;
    category: string;
    description: string;
    amount: number;
  }) => {
    setSpendingData(prev => {
      const idx = prev.findIndex(r => r.date === tx.date);
      if (idx >= 0) {
        const updated = [...prev];
        updated[idx] = {
          ...updated[idx],
          total: updated[idx].total + tx.amount,
          transactions: [...updated[idx].transactions, tx],
        };
        return updated;
      } else {
        return [
          ...prev,
          { date: tx.date, budget: 0, total: tx.amount, transactions: [tx] },
        ];
      }
    });
  };

  const prevMonth = () => {
    if (currentMonth === 0) {
      setCurrentYear(y => y - 1);
      setCurrentMonth(11);
    } else {
      setCurrentMonth(m => m - 1);
    }
  };
  const nextMonth = () => {
    if (currentMonth === 11) {
      setCurrentYear(y => y + 1);
      setCurrentMonth(0);
    } else {
      setCurrentMonth(m => m + 1);
    }
  };

  const fd = firstDayOfMonth(currentYear, currentMonth);
  const dim = daysInMonth(currentYear, currentMonth);

  return (
    <>
      <div className="flex justify-between items-center mb-4 px-4">
        <h2 className="text-2xl font-bold flex items-center gap-2">
          <DollarSign /> {today.toLocaleString("default", { month: "long", year: "numeric" })}
        </h2>
        <div className="flex gap-2">
          <Button variant="outline" size="icon" onClick={prevMonth}>
            <ChevronLeft className="w-4 h-4" />
          </Button>
          <Button variant="outline" size="icon" onClick={nextMonth}>
            <ChevronRight className="w-4 h-4" />
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-7 mb-2 text-center font-medium text-gray-600">
        {DAYS_OF_WEEK.map(d => (
          <div key={d}>{d}</div>
        ))}
      </div>

      <div className="grid grid-cols-7 gap-1 px-4">
        {[...Array(fd)].map((_, i) => (
          <div key={`e${i}`} className="h-24 bg-muted rounded border" />
        ))}

        {[...Array(dim)].map((_, idx) => {
          const day = idx + 1;
          const dateKey = makeDateKey(currentYear, currentMonth, day);
          const entry = spendingData.find(r => r.date === dateKey);

          return (
            <button
              key={dateKey}
              onClick={() => setSelectedDate(dateKey)}
              className="border rounded p-1 text-xs h-24 relative text-left hover:bg-gray-50 bg-white"
            >
              <div className="font-semibold text-[10px]">{day}</div>
              {entry && (
                <>
                  <Badge
                    variant={
                      entry.total < 500
                        ? "default"
                        : entry.total < 700
                        ? "outline"
                        : "destructive"
                    }
                    className="absolute bottom-6 left-1 text-[10px]"
                  >
                    ${entry.total.toFixed(2)}
                  </Badge>
                  <div className="absolute bottom-1 left-1 text-[10px] text-gray-500">
                    {entry.transactions.length} transactions
                  </div>
                </>
              )}
            </button>
          );
        })}
      </div>

      <Dialog open={!!selectedDate} onOpenChange={() => setSelectedDate(null)}>
        <DialogContent>
          <DialogHeader className="flex justify-between items-center">
            <DialogTitle className="flex items-center gap-2 text-lg">
              <DollarSign className="w-5 h-5" />
              {selectedDate}
            </DialogTitle>
            <DialogClose />
          </DialogHeader>

          {selectedDate && (
            <>
              <div className="flex justify-center mb-4">
                <AddTransactionsBtn
                  date={selectedDate}
                  onAdd={handleAddTransaction}
                />
              </div>

              <div className="space-y-3">
                {spendingData.find(r => r.date === selectedDate)?.transactions.map((tx, i) => (
                  <Card key={i} className="w-full">
                    <CardContent className="p-3 flex justify-between items-center">
                      <div>
                        <p className="font-medium">{tx.description}</p>
                        <p className="text-sm text-muted-foreground">{tx.category}</p>
                      </div>
                      <p className="font-semibold">${tx.amount.toFixed(2)}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
}
