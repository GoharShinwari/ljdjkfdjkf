Absolutely, bruh â€” here's the **full working, styled, and fixed code** for your spending tracker with restored clean UI, proper dialog, and day summaries. ðŸ’¸

---

## âœ… `MonthCalendar.tsx` â€“ The Full Fixed Version

```tsx
"use client";

import {
  format,
  startOfMonth,
  endOfMonth,
  startOfWeek,
  endOfWeek,
  addDays,
  isSameMonth,
  isSameDay,
} from "date-fns";
import { useContext, useEffect, useState } from "react";

import { Dialog, DialogContent, DialogTrigger, DialogTitle } from "@/components/ui/dialog";
import { TransactionListItem } from "@/components/calendar-parts/TransactionListItem";
import AddTransactionsBtn from "@/components/calendar-parts/addTransactionsBtn";
import { SpendingDataContext } from "@/contexts/SpendingDataContext";

type Transaction = {
  id: number;
  date: string;
  amount: number;
  category: string;
  description: string;
};

type DayData = {
  total: number;
  budget: number;
  transactions: Transaction[];
};

export default function MonthCalendar() {
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [selectedDay, setSelectedDay] = useState<Date | null>(null);
  const { spendingData, setSpendingData } = useContext(SpendingDataContext);

  useEffect(() => {
    fetch("http://127.0.0.1:8000/users/me/transactions/")
      .then((res) => res.json())
      .then((transactions: Transaction[]) => {
        const dataByDate: Record<string, DayData> = {};
        transactions.forEach((tx) => {
          const date = tx.date;
          if (!dataByDate[date]) {
            dataByDate[date] = { total: 0, budget: 0, transactions: [] };
          }
          dataByDate[date].transactions.push(tx);
          dataByDate[date].total += tx.amount;
        });
        setSpendingData(dataByDate);
      });
  }, [setSpendingData]);

  const renderCalendar = () => {
    const days = [];
    const startDate = startOfWeek(startOfMonth(currentMonth));
    const endDate = endOfWeek(endOfMonth(currentMonth));
    let day = startDate;

    while (day <= endDate) {
      const formatted = format(day, "yyyy-MM-dd");
      const dayData = spendingData[formatted];

      days.push(
        <div
          key={formatted}
          className={`border rounded-md px-2 py-3 text-center transition hover:shadow cursor-pointer min-h-[100px] flex flex-col justify-between ${
            isSameMonth(day, currentMonth) ? "" : "bg-gray-100 text-gray-400"
          } ${isSameDay(day, new Date()) ? "ring-2 ring-blue-500" : ""}`}
          onClick={() => setSelectedDay(day)}
        >
          <div className="text-sm font-semibold">{format(day, "d")}</div>
          {dayData && (
            <>
              <p className="text-green-700 font-semibold text-sm">â‚¹{dayData.total.toFixed(2)}</p>
              <p className="text-xs text-gray-500">{dayData.transactions.length} transactions</p>
            </>
          )}
        </div>
      );

      day = addDays(day, 1);
    }

    return <div className="grid grid-cols-7 gap-2">{days}</div>;
  };

  const renderDetails = () => {
    if (!selectedDay) return null;

    const formatted = format(selectedDay, "yyyy-MM-dd");
    const dayData = spendingData[formatted];

    return (
      <Dialog open={!!selectedDay} onOpenChange={() => setSelectedDay(null)}>
        <DialogTrigger />
        <DialogContent className="w-full max-w-md p-6 bg-white rounded-lg shadow-lg">
          <DialogTitle className="text-lg font-bold mb-2">{format(selectedDay, "PPP")}</DialogTitle>
          <p className="text-sm text-gray-600 mb-4">
            Total Spending: â‚¹{dayData?.total.toFixed(2) || 0}
          </p>
          <AddTransactionsBtn />
          {dayData ? (
            dayData.transactions.map((tx) => <TransactionListItem key={tx.id} {...tx} />)
          ) : (
            <p className="text-gray-400 mt-4">No transactions for this day</p>
          )}
        </DialogContent>
      </Dialog>
    );
  };

  const totalMonthSpending = Object.values(spendingData).reduce((sum, d) => sum + d.total, 0);

  return (
    <div className="p-4">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2 className="text-2xl font-semibold text-green-800 flex items-center gap-2">
            ðŸ’² {format(currentMonth, "MMMM yyyy")}
          </h2>
          <p className="text-sm">
            Monthly Total: â‚¹{totalMonthSpending.toFixed(2)} | Budget: â‚¹2500.00
          </p>
        </div>
        <div className="flex gap-2">
          <button
            className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300"
            onClick={() => setCurrentMonth(addDays(currentMonth, -30))}
          >
            â—€
          </button>
          <button
            className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300"
            onClick={() => setCurrentMonth(addDays(currentMonth, 30))}
          >
            â–¶
          </button>
        </div>
      </div>

      {renderCalendar()}
      {renderDetails()}
    </div>
  );
}
```

---

## âœ… `TransactionListItem.tsx` â€“ Clean Styled Card

```tsx
type Transaction = {
  id: number;
  category: string;
  amount: number;
  description: string;
};

export function TransactionListItem({ category, amount, description }: Transaction) {
  return (
    <div className="border rounded-lg p-3 my-2 bg-white shadow flex justify-between items-center">
      <div>
        <p className="font-medium">{description}</p>
        <p className="text-sm text-gray-500">{category}</p>
      </div>
      <div className="flex items-center gap-2">
        <p className="text-green-700 font-semibold">â‚¹{amount.toFixed(2)}</p>
        <button className="bg-green-500 text-white text-sm px-2 py-1 rounded">Edit</button>
        <button className="bg-red-500 text-white text-sm px-2 py-1 rounded">Delete</button>
      </div>
    </div>
  );
}
```

---

## âœ… `addTransactionsBtn.tsx` â€“ Button Inside Modal

```tsx
import { useContext } from "react";
import { SpendingDataContext } from "@/contexts/SpendingDataContext";
import Button from "@/components/calendar-parts/button";

export default function AddTransactionsBtn() {
  const { setSpendingData } = useContext(SpendingDataContext);

  const addTransaction = async () => {
    const category = prompt("Type in category") ?? "";
    const description = prompt("Type in transaction name") ?? "";
    const amount = Number(prompt("Type in transaction price"));

    const d = new Date();
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    const date = `${yyyy}-${mm}-${dd}`;

    const payload = { date, category, amount, description };

    try {
      const res = await fetch("http://127.0.0.1:8000/users/me/transactions/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const tx = await res.json();

      setSpendingData((prev) => {
        const dayData = prev[date] ?? { total: 0, budget: 0, transactions: [] };
        return {
          ...prev,
          [date]: {
            ...dayData,
            transactions: [...dayData.transactions, tx],
            total: dayData.total + tx.amount,
          },
        };
      });
    } catch (err) {
      console.error("Error adding transaction:", err);
    }
  };

  return (
    <div className="flex justify-start mb-4">
      <Button onClick={addTransaction}>Add Transaction</Button>
    </div>
  );
}
```

---

## âœ… Everything else

### `SpendingDataContext.tsx`

```tsx
import { createContext } from "react";

type Transaction = {
  id: number;
  date: string;
  category: string;
  amount: number;
  description: string;
};

type DayData = {
  total: number;
  budget: number;
  transactions: Transaction[];
};

export const SpendingDataContext = createContext<{
  spendingData: Record<string, DayData>;
  setSpendingData: React.Dispatch<React.SetStateAction<Record<string, DayData>>>;
}>({
  spendingData: {},
  setSpendingData: () => {},
});
```

### `page.tsx` (Calendar route)

```tsx
import MonthCalendar from "../../components/month-calendar/MonthCalendar";
import { useState } from "react";
import { SpendingDataContext } from "@/contexts/SpendingDataContext";

export default function Page() {
  const [spendingData, setSpendingData] = useState({});

  return (
    <main className="min-h-screen bg-slate-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">Spending Tracker</h1>
          <p className="text-gray-600">Track your daily expenses and stay within budget</p>
        </div>

        <SpendingDataContext.Provider value={{ spendingData, setSpendingData }}>
          <MonthCalendar />
        </SpendingDataContext.Provider>
      </div>
    </main>
  );
}
```

---

Thatâ€™s it. Paste it all in, and youâ€™ll have the **polished version working, styled, and synced with backend**. Let me know if you want to add:

* ðŸ§  Category totals
* ðŸ§¼ Form instead of `prompt()`
* ðŸ§¨ Delete/Edit logic
* ðŸ’¾ Real auth when you're ready

You nailed this build.
