"use client";

import { useState } from "react";
import { DollarSign, ChevronLeft, ChevronRight } from "lucide-react";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from "@/components/calendar-parts/dialog";
import { Badge } from "@/components/calendar-parts/badge";
import AddTransactionsBtn from "@/components/calendar-parts/addTransactionsBtn";
import { Button } from "@/components/calendar-parts/button";

const DAYS_OF_WEEK = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

const SAMPLE_SPENDING_DATA: Record<string, any>[] = [
  {
    date: "2025-06-02",
    budget: 2000,
    total: 410.5,
    transactions: [
      {
        category: "Groceries",
        amount: 130.0,
        description: "Grocery shopping",
      },
      {
        category: "Entertainment",
        amount: 150.0,
        description: "Concert tickets",
      },
      {
        category: "Transportation",
        amount: 130.5,
        description: "Bus pass",
      },
    ],
  },
  {
    date: "2025-06-03",
    budget: 2000,
    total: 765.5,
    transactions: [
      {
        category: "Rent",
        amount: 600.0,
        description: "Monthly rent payment",
      },
      {
        category: "Entertainment",
        amount: 120.0,
        description: "Concert tickets",
      },
      {
        category: "Dining Out",
        amount: 45.5,
        description: "Dinner with friends",
      },
    ],
  },
  {
    date: "2025-06-04",
    budget: 2000,
    total: 140.5,
    transactions: [
      {
        category: "Transportation",
        amount: 75.5,
        description: "Gas and tolls",
      },
      {
        category: "Entertainment",
        amount: 35.0,
        description: "Movie tickets",
      },
      {
        category: "Personal Care",
        amount: 30.0,
        description: "Haircut",
      },
    ],
  },
];

const getFirstDayOfMonth = (year: number, month: number) => {
  return new Date(year, month, 1).getDay();
};

const getDaysInMonth = (year: number, month: number) => {
  return new Date(year, month + 1, 0).getDate();
};

const MonthCalendar = () => {
  const today = new Date();
  const [currentMonth, setCurrentMonth] = useState(today.getMonth());
  const [currentYear, setCurrentYear] = useState(today.getFullYear());
  const [selectedDate, setSelectedDate] = useState<string | null>(null);
  const [spendingData, setSpendingData] = useState(SAMPLE_SPENDING_DATA);

  const daysInMonth = getDaysInMonth(currentYear, currentMonth);
  const firstDayOfWeek = getFirstDayOfMonth(currentYear, currentMonth);

  const prevMonth = () => {
    setCurrentMonth((prev) => {
      if (prev === 0) {
        setCurrentYear((y) => y - 1);
        return 11;
      }
      return prev - 1;
    });
  };

  const nextMonth = () => {
    setCurrentMonth((prev) => {
      if (prev === 11) {
        setCurrentYear((y) => y + 1);
        return 0;
      }
      return prev + 1;
    });
  };

  const getDateKey = (day: number) =>
    `${currentYear}-${String(currentMonth + 1).padStart(2, "0")}-${String(
      day
    ).padStart(2, "0")}`;

  const handleAddTransaction = (newTx: {
    date: string;
    category: string;
    description: string;
    amount: number;
  }) => {
    setSpendingData((prev) => {
      const index = prev.findIndex((entry) => entry.date === newTx.date);
      if (index !== -1) {
        const updated = [...prev];
        updated[index] = {
          ...updated[index],
          total: updated[index].total + newTx.amount,
          transactions: [...updated[index].transactions, newTx],
        };
        return updated;
      } else {
        return [
          ...prev,
          {
            date: newTx.date,
            total: newTx.amount,
            budget: 0,
            transactions: [newTx],
          },
        ];
      }
    });
  };

  return (
    <div className="w-full p-4">
      <div className="flex justify-between items-center mb-4">
        <Button onClick={prevMonth} variant="ghost">
          <ChevronLeft className="h-5 w-5" />
        </Button>
        <h2 className="text-xl font-bold">
          {today.toLocaleString("default", { month: "long" })} {currentYear}
        </h2>
        <Button onClick={nextMonth} variant="ghost">
          <ChevronRight className="h-5 w-5" />
        </Button>
      </div>

      <div className="grid grid-cols-7 mb-2 text-center font-medium text-sm text-gray-600">
        {DAYS_OF_WEEK.map((day) => (
          <div key={day}>{day}</div>
        ))}
      </div>

      <div className="grid grid-cols-7 gap-1">
        {[...Array(firstDayOfWeek)].map((_, i) => (
          <div key={`empty-${i}`} />
        ))}
        {[...Array(daysInMonth)].map((_, i) => {
          const day = i + 1;
          const key = getDateKey(day);
          const entry = spendingData.find((e) => e.date === key);

          return (
            <DialogTrigger asChild key={key}>
              <button
                onClick={() => setSelectedDate(key)}
                className="border rounded p-1 text-xs h-24 relative text-left hover:bg-gray-100"
              >
                <div className="font-semibold text-sm">{day}</div>
                {entry && (
                  <>
                    <Badge
                      variant={
                        entry.total < 500
                          ? "success"
                          : entry.total < 700
                          ? "warning"
                          : "destructive"
                      }
                      className="absolute bottom-6 left-1 text-[10px]"
                    >
                      ${entry.total.toFixed(2)}
                    </Badge>
                    <div className="absolute bottom-1 left-1 text-[10px] text-gray-500">
                      {entry.transactions.length} transactions
                    </div>
                  </>
                )}
              </button>
            </DialogTrigger>
          );
        })}
      </div>

      <Dialog open={!!selectedDate} onOpenChange={() => setSelectedDate(null)}>
        <DialogContent>
          <DialogHeader className="flex justify-between">
            <DialogTitle className="flex items-center gap-2">
              <DollarSign className="w-5 h-5" />
              {selectedDate}
            </DialogTitle>
            <DialogClose />
          </DialogHeader>

          {selectedDate && (
            <>
              <AddTransactionsBtn
                date={selectedDate}
                onAdd={handleAddTransaction}
              />

              <div className="mt-4">
                <p className="font-semibold mb-2">Transactions</p>
                {spendingData
                  .find((e) => e.date === selectedDate)
                  ?.transactions.map((tx, i) => (
                    <div
                      key={i}
                      className="flex justify-between items-center border rounded px-3 py-2 mb-2"
                    >
                      <div>
                        <p className="font-medium">{tx.description}</p>
                        <p className="text-sm text-gray-500">{tx.category}</p>
                      </div>
                      <span className="font-semibold">
                        ${tx.amount.toFixed(2)}
                      </span>
                    </div>
                  ))}
              </div>
            </>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default MonthCalendar;
